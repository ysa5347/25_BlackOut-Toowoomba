name: Continuous Integration when accure push at main branch

on:
  pull_request:
    types: [closed]
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 25_blackout-repository               # set this to your Amazon ECR repository name
  CONTAINER_NAME: 25_blackout-backend           # set this to the name of the container in the

permissions:
  contents: read

jobs:
  CI:
    if: github.event.pull_request.merged == true
    name: CI
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with: 
        ref: ${{ github.event.push.base_ref }}
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
        persist-credentials: true

    - name: Set vars and outputs
      id: vars
      with:
        claim_branch: ${{ github.ref }}
      run: |
        echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo 

    - name: Check sha outputs
      run: echo ${{ steps.vars.outputs.sha_short }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.BUILDER_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.BUILDER_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create .env file
      env:
        SECRETS_CONTEXT: ${{ secrets.DB_CONNECTION_ENV }}
      run: |
        echo $SECRETS_CONTEXT > .env

    - name: Build, tag, and push image to Amazon ECR
      id: build-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        sha: ${{ steps.vars.outputs.sha_short }}
        branch: ${{ github.ref_name }}
        claim_branch: ${{ github.ref_name }}
        
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.claim_branch }}-${{ env.sha }} --build-arg BRANCH=${{ env.branch }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.sha }}
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:main-${{ env.sha }}"
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-push.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    outputs:
      sha_short: ${{ steps.vars.outputs.sha_short }}
    